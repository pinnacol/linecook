#!/usr/bin/env ruby

require 'optparse'
require 'fileutils'

ARGV << '-h' if ARGV.empty?
options = {:force => false}
OptionParser.new do |opts|
  opts.banner = "Usage: line_cook [options] PATH"
  
  opts.on("-f", "--force", "Force creation of project") do
    options[:force] = true
  end
  
  opts.on("-h", "--help", "Print this help") do |v|
    puts opts
    exit
  end
end.parse!

template_dir = File.expand_path('../../template', __FILE__)
project_dir  = File.expand_path(ARGV[0])
project_name = File.basename(project_dir)

if File.exists?(project_dir)
  unless options[:force]
    puts "already exists: #{project_dir}"
    exit 1
  end
  
  current_dir = File.expand_path('.')
  unless project_dir.index(current_dir) == 0 && project_dir.length > current_dir.length
    puts "cannot force creation of current or parent directory (safety issue)"
    exit 1
  end
  
  FileUtils.rm_rf(project_dir)
end

Dir.glob("#{template_dir}/**/*").each do |source|
  relative_path = source[(template_dir.length + 1)..-1]
  relative_path = relative_path.sub('project_name', project_name).sub(/^_/, '.')
  target = File.join(project_dir, relative_path)
  
  if File.directory?(source)
    FileUtils.mkdir_p(target)
  else
    puts "      create  #{relative_path}"
    
    target_dir = File.dirname(target)
    unless File.exists?(target_dir)
      FileUtils.mkdir_p(target_dir)
    end
    
    File.open(target, 'w') do |io|
      io << File.read(source).gsub('%project_name%', project_name)
    end
  end
end

FileUtils.ln_s File.join(project_dir, 'scripts'), File.join(project_dir, 'vbox/scripts')
