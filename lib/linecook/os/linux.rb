# Generated by Linecook

module Linecook
  module Os
    # Defines Linux-compliant functionality, based on the {Linux Standard Base
    # Core Specification 4.1 }[http://refspecs.linuxfoundation.org/lsb.shtml]. See
    # the online documentation for:
    #
    # * {Commands and Utilities
    #   }[http://refspecs.linuxfoundation.org/LSB_4.1.0/LSB-Core-generic/LSB-Core-generic/cmdbehav.html]
    # * {Single Unix Specification V2
    #   }[http://pubs.opengroup.org/onlinepubs/007908799/xcuix.html]
    # Posix does not specify commands for user management, but Linux does. Now
    # that users are overtly in the mix, see {How to Switch
    # Users}[link:files/HowTo/Switch%20Users.html] for picking a su policy.
    module Linux
      require 'linecook/os/posix'
      include Posix

      require 'linecook/os/linux/utilities'
      include Utilities

      def capture_script(options={})
        unless options.kind_of?(Hash)
          options = {:target_name => options}
        end

        options[:mode] ||= 0770
        target_name = options.delete(:target_name) || _package_.next_target_path('script')
        path = capture_path(target_name, options) { yield }

        owner, group = options[:owner], options[:group]
        if owner || group
          callback 'before' do
            chown owner, group, path
          end
        end

        path
      end

      # Logs in as the specified user for the duration of a block (the current ENV
      # and pwd are reset as during a normal login).
      def login(user='root', options={})
        current = functions
        begin
          @functions = nil

          path = capture_script(options) { yield }
          execute 'su', user, path, :l => true
        ensure
          @functions = current
        end
        _chain_proxy_
      end

      def _login(*args, &block) # :nodoc:
        str = capture { login(*args, &block) }
        str.strip!
        str
      end
    end
  end
end
