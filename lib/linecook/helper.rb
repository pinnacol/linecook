require 'linecook/template'

module Linecook
  class Helper < Template
    attr_reader :const_name
    attr_reader :sources
    
    def initialize(const_name, sources)
      @const_name = const_name
      @sources    = sources.select {|source| File.file?(source) }
      @section_paths, @definition_paths = @sources.partition {|path| File.basename(path)[0] == ?_ }
      super()
    end
    
    def build
      eval MODULE_TEMPLATE, binding, __FILE__, MODULE_TEMPLATE_LINE
      result
    end
    
    def sections
      @sections ||= begin
        sections = {}
        
        @section_paths.each do |path|
          key = File.basename(path)[1..-1]
          key.chomp! File.extname(path)
          sections[key.to_sym] = File.read(path)
        end
        
        sections
      end
    end
    
    def definitions
      @definitions ||= @definition_paths.collect {|path| parse(path) }
    end
    
    private
    
    def parse(path)
      extname = File.extname(path)
      name = File.basename(path).chomp(extname)
      
      head, body = File.read(path).split(/^--.*\n/, 2)
      head, body = '', head if body.nil?
      signature, desc = parse_head(head)
      
      [name, desc, signature.join("\n"), body, extname]
    end
    
    def format(body, extname)
      case extname
      when '.erb'
        source = "#  #{body.gsub(/\n/, "\n#  ")}"
        code   = ERB.new(body, nil, '<>').src
        
        if code =~ /\A_erbout = '';\s*(.*?)\s*_erbout\z/m
          code = $1
        end
        
        "#{source}\n#{code}".gsub(/^(\s*)/) do |m| 
          indent = 2 + $1.length - ($1.length % 2)
          ' ' * indent
        end
        
      when '.rb'
        body
        
      else
        raise "invalid definition format: #{extname.inspect}"
      end
    end
    
    def parse_head(head)
      found_signature = false
      head.split("\n").partition do |line|
        found_signature = true if line =~ /^\s*\(.*?\)/
        found_signature
      end
    end
    
    def method_name(name)
      case name
      when /_check$/ then name.sub(/_check$/, '?')
      when /_bang$/  then name.sub(/_bang$/, '!')
      else name
      end
    end
    
    def module_nest(const_name, indent="  ", line_sep="\n")
      nestings = const_name.split(/::/).collect {|name| ["module #{name}", "end"]} 
      nestings << {:indent => indent, :line_sep => line_sep}
      
      nest(*nestings) { yield }
    end
    
    MODULE_TEMPLATE_LINE = __LINE__ + 2
    MODULE_TEMPLATE = "self." + ERB.new(<<-DOC, nil, '<>').src
require 'erb'
<%= sections[:header] %>

# Generated by Linecook, do not edit.
<% module_nest(const_name) do %>
<%= sections[:head].to_s.strip %>

<% definitions.each do |name, desc, signature, body, extname| %>

<% desc.each do |line| %>
# <%= line %>
<% end %>
def <%= method_name(name) %><%= signature %>
<%= format(body, extname) %>

  nil
end

def _<%= method_name(name) %>(*args, &block) # :nodoc:
  capture { <%= method_name(name) %>(*args, &block) }
end
<% end %>

<%= sections[:tail].to_s.strip %>
<% end %>

<%= sections[:footer] %>
DOC
  end
end